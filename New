import * as vscode from 'vscode';
import { getWebviewContent } from './panel';

export function activate(context: vscode.ExtensionContext) {
  context.subscriptions.push(
    vscode.commands.registerCommand('gptChat.openChat', () => {
      const panel = vscode.window.createWebviewPanel(
        'gptChat',
        'GPT Chat Assistant',
        vscode.ViewColumn.Beside,
        {
          enableScripts: true,
          retainContextWhenHidden: true
        }
      );
      panel.webview.html = getWebviewContent(context, panel.webview);
    })
  );
}
import * as vscode from 'vscode';
import * as path from 'path';

export function getWebviewContent(context: vscode.ExtensionContext, webview: vscode.Webview): string {
  const scriptUri = webview.asWebviewUri(
    vscode.Uri.file(path.join(context.extensionPath, 'media', 'main.js'))
  );

  


return `
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>GPT Assistant</title>
  </head>
  <body>
    <div id="root"></div>
    <script src="${scriptUri}"></script>
  </body>
  </html>
  `;
}




import React, { useState } from 'react';
import { Chat } from './components/Chat';

export default function App() {
  return (
    <div className="p-4 bg-white h-screen">
      <h1 className="text-xl font-bold mb-4">GPT Code Assistant</h1>
      <Chat />
    </div>
  );
}




{
  "name": "webview-ui",
  "version": "1.0.0",
  "main": "src/index.tsx",
  "scripts": {
    "build": "webpack"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "webpack": "^5.0.0",
    "ts-loader": "^9.0.0"
  }
}






import React, { useState } from 'react';

export const Chat = () => {
  const [messages, setMessages] = useState<string[]>([]);
  const [input, setInput] = useState('');

  const sendMessage = async () => {
    if (!input) return;
    setMessages(prev => [...prev, `You: ${input}`]);

    const fileMentions = input.match(/@\w+\.\w+/g) || [];
    const files = fileMentions.map(name => name.replace('@', ''));

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer YOUR_OPENAI_API_KEY`
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: input + ' ' + files.join(', ') }]
      })
    });
    const data = await response.json();
    setMessages(prev => [...prev, `AI: ${data.choices[0].message.content}`]);
    setInput('');
  };

  return (
    <div>
      <div className="h-96 overflow-auto border p-2 mb-2">
        {messages.map((msg, idx) => <p key={idx}>{msg}</p>)}
      </div>
      <input
        value={input}
        onChange={e => setInput(e.target.value)}
        placeholder="Ask your coding questionâ€¦"
        className="border p-2 w-full mb-2"
      />
      <button onClick={sendMessage} className="bg-blue-500 text-white p-2 rounded">Send</button>
    </div>
  );
};
